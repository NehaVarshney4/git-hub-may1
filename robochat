Here’s a step-by-step guide to creating, submitting, and managing pull requests on GitHub, from forking to merging:

### 1. **Forking the Repository**
   - Navigate to the repository you want to contribute to.
   - Click the **Fork** button in the top-right corner of the repository page. This creates a copy of the repository in your GitHub account.

### 2. **Cloning the Fork**
   - Clone the forked repository to your local machine:
     ```bash
     git clone https://github.com/your-username/repository-name.git
     ```
   - Navigate to the repository folder:
     ```bash
     cd repository-name
     ```

### 3. **Creating a Branch**
   - Always create a new branch for your changes:
     ```bash
     git checkout -b branch-name
     ```
   - Use a descriptive branch name that reflects the changes you’re making.

### 4. **Making Changes**
   - Make the necessary changes to the codebase.
   - Save the changes and stage them:
     ```bash
     git add .
     ```
   - Commit the changes with a meaningful message:
     ```bash
     git commit -m "Describe your changes here"
     ```

### 5. **Pushing Changes**
   - Push your branch to your forked repository:
     ```bash
     git push origin branch-name
     ```

### 6. **Creating a Pull Request**
   - After pushing your branch, navigate to the original repository on GitHub.
   - Click the **Pull requests** tab and then click **New pull request**.
   - Select your branch to compare with the base branch (e.g., `main`).
   - Review the proposed changes and click **Create pull request**.
   - Add a title and description to describe the changes you made.

### 7. **Collaborating and Addressing Feedback**
   - Collaborators or maintainers may review your pull request and leave feedback.
   - Address feedback by making additional commits:
     ```bash
     git add .
     git commit -m "Address feedback"
     git push origin branch-name
     ```
   - Your pull request will automatically update with the new commits.

### 8. **Handling Merge Conflicts**
   - If there are merge conflicts, GitHub will notify you. Resolve the conflicts locally:
     ```bash
     git fetch upstream
     git merge upstream/main
     # Resolve conflicts in your editor
     git add .
     git commit -m "Resolve merge conflicts"
     git push origin branch-name
     ```

### 9. **Merging the Pull Request**
   - Once your changes are approved, a repository maintainer (or you, if you have permissions) can merge the pull request:
     - Click **Merge pull request**, then **Confirm merge**.
   - Optionally, delete the branch to keep the repository clean.

### 10. **Synchronizing Your Fork**
   - Keep your fork updated with the original repository:
     ```bash
     git remote add upstream https://github.com/original-owner/repository-name.git
     git fetch upstream
     git merge upstream/main
     git push origin main
     ```

For more details, refer to the following official GitHub documentation:
- [Hello World](https://docs.github.com/en/get-started/start-your-journey/hello-world)
- [GitHub Flow](https://docs.github.com/en/get-started/using-github/github-flow)
- [Creating a Pull Request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)
